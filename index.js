let Sandbox = require('docker-python-sandbox');
const poolSize = 5
let sandbox = new Sandbox({poolSize})

const path = require('path')
const express = require('express')
const app = express()
// const server = require('http').Server(app);
const port = 3000
const server = app.listen(port, () => {
	console.log(`listening on ${port}`)
})
const io = require('socket.io')(server,{allowEIO3: true});

app.use('/lib', express.static('static/lib'))
app.use('/mode', express.static('static/mode'))
app.use('/js', express.static('static/js'))
app.use('/socket.io', express.static('node_modules/socket.io'))
app.set('view engine', 'ejs')
app.set('views', path.join(__dirname,'views'))

var clientSessionMap = {}; // map from clientId to sessionId
var code = {}; // map from sessionId to code
var sessionClientCounter = {};
var needHelp = {};

io.on('connection', (client) => {
	// clientId is each tab's id, it is generated by socket.io
	// sessionId is each link's id (accessed with .com/sessId), it is generated by the users link
	// multiple clients can be logged into the same session
	client.on('sessId', (sessId) => {
		console.log(sessId, client.id, ' joined');
		clientSessionMap[client.id] = sessId

		if(sessionClientCounter[sessId]) sessionClientCounter[sessId] += 1;
		else sessionClientCounter[sessId] = 1;
		needHelp[sessId] = false;

		if(code[sessId]) client.emit('newCode', {code: code[sessId]});

		client.join(sessId)
	});
	// client wants to update code
	client.on('updateCode', (data) => {
		code[clientSessionMap[client.id]] = data['code']
		sessId = clientSessionMap[client.id]
		io.to(sessId).emit('newCode', {code: code[sessId]} );
	});
	// client wants to retrieve code
	client.on('retrieveCode', (callback) => {
		sessId = clientSessionMap[client.id]
		client.emit('newCode', {code: code[sessId]});
	});
	client.on('disconnect', () => {
		sessId = clientSessionMap[client.id];
		sessionClientCounter[sessId] -= 1;
		delete clientSessionMap[client.id];
		if(sessionClientCounter[sessId] == 0){
//			delete code[sessId];
			delete needHelp[sessId];
		}
	});
	client.on('run', () => {
		sessId = clientSessionMap[client.id];
	});
	client.on('help', () => {
		sessId = clientSessionMap[client.id];
		needHelp[sessId] = true;
	});
	client.on('unhelp', (sessId) => {
		console.log(sessId);
		needHelp[sessId] = false;
	});
});

app.get('/', (req,res) => {
	let randomSessId = Math.random().toString(36).substring(7);
	res.redirect('/session/'+randomSessId);
});
app.get('/admin', (req,res) => {
	sessions = []
	for(var i in clientSessionMap){
		console.log(i)
		sessions.push([ clientSessionMap[i], 
			needHelp[clientSessionMap[i]]]);
	}
	console.log(clientSessionMap)
	console.log(sessions);
	res.render("admin", {sessions: sessions});
});
app.get('/session/:sessId', (req,res) => {
	sessId = req.params['sessId']
	res.render("index", {sessId: sessId})
})

